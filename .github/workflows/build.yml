name: Build eltord Binary
on:
  workflow_dispatch:
    inputs:
      build_target:
        description: 'Choose which platform to build'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - linux
          - windows
  push:
    tags:
      - 'v*' # Trigger on version tags like v1.0.0
  # push:
  #   branches: [main]
  # pull_request:
  #   branches: [main]
  # release:
  #   types: [created] # Trigger on GitHub release creation

permissions:
  contents: write # Needed for uploading release assets

jobs:
  build-linux:
    name: Build eltord - Linux-x86_64
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.build_target == 'all' || github.event.inputs.build_target == 'linux' || github.event.inputs.build_target == '' }}
    env:
      PLATFORM_OS: ubuntu-latest
      PLATFORM_TARGET: x86_64-unknown-linux-gnu
      PLATFORM_BIN: eltord
      PLATFORM_OS_NAME: Linux-x86_64

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ env.PLATFORM_TARGET }}

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2

      - name: Install Linux dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            pkg-config \
            libssl-dev \
            libsqlite3-dev \
            build-essential \
            curl \
            wget \
            git \
            autoconf \
            automake \
            libtool \
            zlib1g-dev \
            libevent-dev \
            libscrypt-dev \
            make \
            patch \
            flex \
            bison \
            unzip \
            clang

      - name: Clone git dependencies
        run: |
          git clone https://github.com/el-tor/eltor.git /home/runner/code/eltor
          git clone https://github.com/lightning-node-interface/lni.git /home/runner/code/lni
          git clone https://github.com/el-tor/libeltor-sys.git /home/runner/code/libeltor-sys
          git clone https://github.com/el-tor/libeltor.git /home/runner/code/libeltor
          git clone https://github.com/el-tor/eltord.git /home/runner/code/eltord

      - name: Checkout specific branches
        run: |
          cd /home/runner/code/eltord && git checkout lib
          cd /home/runner/code/lni && git checkout search

      - name: Build libeltor-sys
        run: |
          cd /home/runner/code/libeltor-sys
          ls -la && ls -la scripts
          chmod +x scripts/copy.sh scripts/build.sh
          ./scripts/copy.sh
          mkdir -p patches libtor-src/patches
          touch patches/.keep libtor-src/patches/.keep
          cargo build --release --verbose --target ${{ env.PLATFORM_TARGET }} --features vendored-openssl

      - name: Build eltord
        run: |
          cd /home/runner/code/eltord
          cargo build --release --verbose --target ${{ env.PLATFORM_TARGET }} --features vendored-openssl

      - name: Rename binaries
        run: |
          mkdir -p artifacts/${{ env.PLATFORM_OS_NAME }}
          mv /home/runner/code/eltord/target/${{ env.PLATFORM_TARGET }}/release/eltord artifacts/${{ env.PLATFORM_OS_NAME }}/${{ env.PLATFORM_BIN }}  

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: eltord-${{ env.PLATFORM_OS_NAME }}
          path: |
            artifacts
          if-no-files-found: error

      - name: Release binary
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/${{ env.PLATFORM_OS_NAME }}/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-windows:
    name: Build eltord - Windows-x86_64 (Cross-compiled from Linux)
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.build_target == 'all' || github.event.inputs.build_target == 'windows' || github.event.inputs.build_target == '' }}
    env:
      PLATFORM_OS: ubuntu-latest
      PLATFORM_TARGET: x86_64-pc-windows-gnu
      PLATFORM_BIN: eltord.exe
      PLATFORM_OS_NAME: Windows-x86_64

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ env.PLATFORM_TARGET }}

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2

      - name: Install MinGW cross-compilation dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            pkg-config \
            libssl-dev \
            libsqlite3-dev \
            build-essential \
            curl \
            wget \
            git \
            autoconf \
            automake \
            libtool \
            zlib1g-dev \
            libevent-dev \
            libscrypt-dev \
            make \
            patch \
            flex \
            bison \
            unzip \
            clang \
            mingw-w64 \
            gcc-mingw-w64-x86-64 \
            g++-mingw-w64-x86-64

      - name: Set cross-compilation environment
        run: |
          # Set environment variables for MinGW cross-compilation
          echo "CC_x86_64_pc_windows_gnu=x86_64-w64-mingw32-gcc" >> $GITHUB_ENV
          echo "CXX_x86_64_pc_windows_gnu=x86_64-w64-mingw32-g++" >> $GITHUB_ENV
          echo "AR_x86_64_pc_windows_gnu=x86_64-w64-mingw32-ar" >> $GITHUB_ENV
          echo "CARGO_TARGET_X86_64_PC_WINDOWS_GNU_LINKER=x86_64-w64-mingw32-gcc" >> $GITHUB_ENV
          
          # Set Rust build flags for static linking
          echo "RUSTFLAGS=-C target-feature=+crt-static" >> $GITHUB_ENV

      - name: Verify cross-compilation tools
        run: |
          echo "=== Checking MinGW cross-compilation tools ==="
          which x86_64-w64-mingw32-gcc || echo "x86_64-w64-mingw32-gcc not found"
          which x86_64-w64-mingw32-g++ || echo "x86_64-w64-mingw32-g++ not found"
          which x86_64-w64-mingw32-ar || echo "x86_64-w64-mingw32-ar not found"
          which x86_64-w64-mingw32-ranlib || echo "x86_64-w64-mingw32-ranlib not found"
          
          echo "=== Testing MinGW compiler ==="
          x86_64-w64-mingw32-gcc --version || echo "MinGW GCC test failed"
          
          echo "=== Environment variables ==="
          echo "CC_x86_64_pc_windows_gnu: $CC_x86_64_pc_windows_gnu"
          echo "CXX_x86_64_pc_windows_gnu: $CXX_x86_64_pc_windows_gnu"
          echo "AR_x86_64_pc_windows_gnu: $AR_x86_64_pc_windows_gnu"
          echo "CARGO_TARGET_X86_64_PC_WINDOWS_GNU_LINKER: $CARGO_TARGET_X86_64_PC_WINDOWS_GNU_LINKER"
          echo "RUSTFLAGS: $RUSTFLAGS"

      - name: Clone git dependencies
        run: |
          git clone https://github.com/el-tor/eltor.git /home/runner/code/eltor
          git clone https://github.com/lightning-node-interface/lni.git /home/runner/code/lni
          git clone https://github.com/el-tor/libeltor-sys.git /home/runner/code/libeltor-sys
          git clone https://github.com/el-tor/libeltor.git /home/runner/code/libeltor
          git clone https://github.com/el-tor/eltord.git /home/runner/code/eltord

      - name: Checkout specific branches
        run: |
          cd /home/runner/code/eltord && git checkout lib
          cd /home/runner/code/lni && git checkout search

      - name: Build libeltor-sys for Windows
        run: |
          cd /home/runner/code/libeltor-sys
          ls -la && ls -la scripts
          chmod +x scripts/copy.sh scripts/build.sh
          ./scripts/copy.sh
          mkdir -p patches libtor-src/patches
          touch patches/.keep libtor-src/patches/.keep
          cargo build --release --verbose --target ${{ env.PLATFORM_TARGET }} --features vendored-openssl

      - name: Build eltord for Windows
        run: |
          cd /home/runner/code/eltord
          cargo build --release --verbose --target ${{ env.PLATFORM_TARGET }} --features vendored-openssl

      - name: Rename binaries
        run: |
          mkdir -p artifacts/${{ env.PLATFORM_OS_NAME }}
          mv /home/runner/code/eltord/target/${{ env.PLATFORM_TARGET }}/release/eltord.exe artifacts/${{ env.PLATFORM_OS_NAME }}/${{ env.PLATFORM_BIN }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: eltord-${{ env.PLATFORM_OS_NAME }}
          path: |
            artifacts
          if-no-files-found: error

      - name: Release binary
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/${{ env.PLATFORM_OS_NAME }}/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
