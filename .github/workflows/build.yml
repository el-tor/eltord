name: Build eltord Binary
on:
  workflow_dispatch:
  push:
    tags:
      - 'v*' # Trigger on version tags like v1.0.0
  # push:
  #   branches: [main]
  # pull_request:
  #   branches: [main]
  # release:
  #   types: [created] # Trigger on GitHub release creation

permissions:
  contents: write # Needed for uploading release assets

jobs:
  build:
    name: Build eltord - ${{ matrix.platform.os_name }}
    runs-on: ${{ matrix.platform.os }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          - os_name: Linux-x86_64
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            bin: eltord
          - os_name: Windows-x86_64
            os: windows-latest
            target: x86_64-pc-windows-msvc
            bin: eltord.exe
          # - os_name: Linux-aarch64
          #   os: ubuntu-latest
          #   target: aarch64-unknown-linux-gnu
          #   bin: eltord
          #   use_cross: true
          # - os_name: macOS-x86_64
          #   os: macos-latest
          #   target: x86_64-apple-darwin
          #   bin: eltord
          # - os_name: macOS-aarch64
          #   os: macos-latest
          #   target: aarch64-apple-darwin
          #   bin: eltord

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.platform.target }}

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2

      - name: Install Linux dependencies
        if: matrix.platform.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            pkg-config \
            libssl-dev \
            libsqlite3-dev \
            build-essential \
            curl \
            wget \
            git \
            autoconf \
            automake \
            libtool \
            zlib1g-dev \
            libevent-dev \
            libscrypt-dev \
            make \
            patch \
            flex \
            bison \
            unzip \
            clang

      - name: Install macOS dependencies
        if: matrix.platform.os == 'macos-latest'
        run: |
          brew install openssl@3 sqlite libevent tor

      - name: Install Windows dependencies
        if: matrix.platform.os == 'windows-latest'
        run: |
          choco install -y openssl sqlite git make mingw

      - name: Clone git dependencies
        run: |
          if [ "${{ runner.os }}" = "Windows" ]; then
            git clone https://github.com/el-tor/eltor.git D:/a/code/eltor
            git clone https://github.com/lightning-node-interface/lni.git D:/a/code/lni
            git clone https://github.com/el-tor/libeltor-sys.git D:/a/code/libeltor-sys
            git clone https://github.com/el-tor/libeltor.git D:/a/code/libeltor
            git clone https://github.com/el-tor/eltord.git D:/a/code/eltord
          else
            git clone https://github.com/el-tor/eltor.git /home/runner/code/eltor
            git clone https://github.com/lightning-node-interface/lni.git /home/runner/code/lni
            git clone https://github.com/el-tor/libeltor-sys.git /home/runner/code/libeltor-sys
            git clone https://github.com/el-tor/libeltor.git /home/runner/code/libeltor
            git clone https://github.com/el-tor/eltord.git /home/runner/code/eltord
          fi
        shell: bash

      - name: Checkout specific branches
        run: |
          if [ "${{ runner.os }}" = "Windows" ]; then
            cd D:/a/code/eltord && git checkout master
            cd D:/a/code/lni && git checkout search
          else
            cd /home/runner/code/eltord && git checkout master
            cd /home/runner/code/lni && git checkout search
          fi
        shell: bash

      - name: Build libeltor-sys
        run: |
          if [ "${{ runner.os }}" = "Windows" ]; then
            cd D:/a/code/libeltor-sys
          else
            cd /home/runner/code/libeltor-sys
          fi
          ls -la && ls -la scripts
          chmod +x scripts/copy.sh scripts/build.sh
          ./scripts/copy.sh
          mkdir -p patches libtor-src/patches
          touch patches/.keep libtor-src/patches/.keep
          cargo build --release --verbose --target ${{ matrix.platform.target }}
        shell: bash

      - name: Build eltord
        run: |
          if [ "${{ runner.os }}" = "Windows" ]; then
            cd D:/a/code/eltord
          else
            cd /home/runner/code/eltord
          fi
          cargo build --release --verbose --target ${{ matrix.platform.target }}
        shell: bash

      - name: Rename binaries
        run: |
          mkdir -p artifacts/${{ matrix.platform.os_name }}
          if [ "${{ runner.os }}" = "Windows" ]; then
            mv D:/a/code/eltord/target/${{ matrix.platform.target }}/release/eltor.exe artifacts/${{ matrix.platform.os_name }}/eltord.exe
          else
            mv /home/runner/code/eltord/target/${{ matrix.platform.target }}/release/eltor artifacts/${{ matrix.platform.os_name }}/eltord
          fi
        shell: bash

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: eltord-${{ matrix.platform.os_name }}
          path: |
            artifacts
          if-no-files-found: error

      - name: Release binary
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/${{ matrix.platform.os_name }}/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
