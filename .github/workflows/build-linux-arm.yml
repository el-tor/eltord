name: Build eltord binary - ARM64
on:
  workflow_dispatch:

jobs:
  build-linux-arm:
    name: Build eltord - ${{ matrix.name }}
    runs-on: ${{ matrix.runs-on }}
    strategy:
      matrix:
        include:
          - name: Linux ARM64
            runs-on: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            os-name: linux-arm64
            setup-script: setup-linux
    
    env:
      PLATFORM_TARGET: ${{ matrix.target }}
      PLATFORM_BIN: eltord
      PLATFORM_OS_NAME: ${{ matrix.os-name }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain (Linux only)
        if: matrix.setup-script == 'setup-linux'
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install Linux ARM64 cross-compilation tools
        if: matrix.setup-script == 'setup-linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            gcc-aarch64-linux-gnu \
            libc6-dev-arm64-cross \
            pkg-config \
            libssl-dev \
            libsqlite3-dev

      - name: Setup Linux cross-compilation environment
        if: matrix.setup-script == 'setup-linux'
        run: |
          # Set up environment variables for cross-compilation
          echo "CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CXX_aarch64_unknown_linux_gnu=aarch64-linux-gnu-g++" >> $GITHUB_ENV
          echo "AR_aarch64_unknown_linux_gnu=aarch64-linux-gnu-ar" >> $GITHUB_ENV
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "PKG_CONFIG_ALLOW_CROSS=1" >> $GITHUB_ENV
          echo "OPENSSL_DIR=/usr" >> $GITHUB_ENV

      - name: Verify Linux environment (Linux only)
        if: matrix.setup-script == 'setup-linux'
        run: |
          echo "=== Linux Cross-Compilation Environment ==="
          echo "Rust version:" && rustc --version
          echo "Cargo version:" && cargo --version
          echo "Cross-compiler:" && aarch64-linux-gnu-gcc --version
          echo "Target installed:" && rustup target list --installed | grep aarch64-unknown-linux-gnu
          echo
          echo "=== Environment Variables ==="
          echo "CC_aarch64_unknown_linux_gnu: $CC_aarch64_unknown_linux_gnu"
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: $CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER"

      - name: Clone git dependencies
        run: |
          # Use a temporary directory instead of /Users/runner/code
          export BUILD_DIR=$HOME/tmp/eltord-build-$(date +%s)
          mkdir -p $BUILD_DIR
          echo "BUILD_DIR=$BUILD_DIR" >> $GITHUB_ENV
          
          git clone https://github.com/el-tor/eltor.git $BUILD_DIR/eltor
          git clone https://github.com/lightning-node-interface/lni.git $BUILD_DIR/lni
          git clone https://github.com/el-tor/libeltor-sys.git $BUILD_DIR/libeltor-sys
          git clone https://github.com/el-tor/libeltor.git $BUILD_DIR/libeltor
          git clone https://github.com/el-tor/eltord.git $BUILD_DIR/eltord

      - name: Checkout specific branches
        run: |
          cd $BUILD_DIR/eltord && git checkout lib
          cd $BUILD_DIR/lni && git checkout search

      - name: Build libeltor-sys (Linux cross-compilation)
        if: matrix.setup-script == 'setup-linux'
        run: |
          cd $BUILD_DIR/libeltor-sys
          ls -la && ls -la scripts
          chmod +x scripts/copy.sh scripts/build.sh
          ./scripts/copy.sh
          mkdir -p patches libtor-src/patches
          touch patches/.keep libtor-src/patches/.keep
          cargo build --release --verbose --target ${{ matrix.target }} --features vendored-openssl

      - name: Build eltord (Linux cross-compilation)
        if: matrix.setup-script == 'setup-linux'
        run: |
          cd $BUILD_DIR/eltord
          cargo build --release --verbose --target ${{ matrix.target }} --features vendored-openssl

      - name: Copy artifacts
        run: |
          # Create artifacts directory in workspace (persists locally with act)
          mkdir -p artifacts/${{ matrix.os-name }}
          cp $BUILD_DIR/eltord/target/${{ matrix.target }}/release/eltor artifacts/${{ matrix.os-name }}/${{ env.PLATFORM_BIN }}
          
          # For local runs (act or self-hosted), also copy to a persistent cache directory in the workspace
          if [ "$ACT" = "true" ]; then
            CACHE_DIR="cache/eltord-build-artifacts"
            mkdir -p "$CACHE_DIR/${{ matrix.os-name }}"
            cp $BUILD_DIR/eltord/target/${{ matrix.target }}/release/eltor "$CACHE_DIR/${{ matrix.os-name }}/${{ env.PLATFORM_BIN }}"
            echo "Cached artifact to: $(pwd)/$CACHE_DIR/${{ matrix.os-name }}/${{ env.PLATFORM_BIN }}"
            
            # Also ensure the binary is executable
            chmod +x "$CACHE_DIR/${{ matrix.os-name }}/${{ env.PLATFORM_BIN }}"
            chmod +x "artifacts/${{ matrix.os-name }}/${{ env.PLATFORM_BIN }}"
          fi

      - name: Cleanup
        run: |
          # Clean up temporary build directory
          rm -rf $BUILD_DIR
          echo "Cleaned up temporary build directory: $BUILD_DIR"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        if: ${{ !env.ACT }}  # Skip artifact upload when running with act
        with:
          name: eltord-${{ matrix.os-name }}
          path: |
            artifacts
          if-no-files-found: error

      - name: Show local artifacts (act)
        if: ${{ env.ACT }}  # Run for act only
        run: |
          echo "=== Local Build Artifacts - ${{ matrix.name }} ==="
          echo "üìÅ Workspace artifacts:"
          ls -la artifacts/
          ls -la artifacts/${{ matrix.os-name }}/
          echo
          
          CACHE_DIR="cache/eltord-build-artifacts"
          if [ -d "$CACHE_DIR" ]; then
            echo "üóÉÔ∏è  Cached artifacts (persistent between runs):"
            ls -la "$CACHE_DIR"
            if [ -d "$CACHE_DIR/${{ matrix.os-name }}" ]; then
              ls -la "$CACHE_DIR/${{ matrix.os-name }}/"
            fi
            echo
          fi
          
          echo "üéâ Build completed successfully!"
          echo "üì¶ Workspace artifact: $(pwd)/artifacts/${{ matrix.os-name }}/${{ env.PLATFORM_BIN }}"
          if [ -f "$CACHE_DIR/${{ matrix.os-name }}/${{ env.PLATFORM_BIN }}" ]; then
            echo "üóÉÔ∏è  Cached artifact: $(pwd)/$CACHE_DIR/${{ matrix.os-name }}/${{ env.PLATFORM_BIN }}"
          fi
          echo "üìè Binary size: $(ls -lh artifacts/${{ matrix.os-name }}/${{ env.PLATFORM_BIN }} | awk '{print $5}')"
          echo "üèóÔ∏è  Architecture: ${{ matrix.target }}"

      - name: Release binary
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/${{ matrix.os-name }}/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}