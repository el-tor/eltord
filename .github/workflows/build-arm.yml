name: Build eltord binary - ARM64
on:
  workflow_dispatch:

jobs:
  build-mac-arm:
    name: Build eltord - mac arm
    runs-on: self-hosted
    env:
      PLATFORM_OS: macos-latest
      PLATFORM_TARGET: aarch64-apple-darwin
      PLATFORM_BIN: eltord
      PLATFORM_OS_NAME: macOS-arm64

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # - name: Install/Setup Nix
      #   uses: cachix/install-nix-action@v22
      #   with:
      #     nix_path: nixpkgs=channel:nixos-unstable
      #     extra_nix_config: |
      #       experimental-features = nix-command flakes
      #       substituters = https://cache.nixos.org/
      #       trusted-public-keys = cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY=

      - name: Install Xcode Command Line Tools
        run: |
          # Check if Xcode CLI tools are already installed
          if ! xcode-select -p &> /dev/null; then
            echo "Installing Xcode Command Line Tools..."
            xcode-select --install
            # Wait for installation to complete
            until xcode-select -p &> /dev/null; do
              sleep 5
            done
          fi
          echo "Xcode Command Line Tools are installed at: $(xcode-select -p)"

      - name: Setup Nix development environment
        run: |
          # Create a shell.nix file for the build environment
          cat > shell.nix << 'EOF'
          { pkgs ? import <nixpkgs> {} }:
          
          pkgs.mkShell {
            buildInputs = with pkgs; [
              # Rust toolchain
              rustc
              cargo
              rustfmt
              clippy
              
              # Build dependencies
              pkg-config
              openssl
              sqlite
              autoconf
              automake
              libtool
              gnumake
              wget
              git
              flex
              bison
              unzip
              
              # macOS specific
              darwin.apple_sdk.frameworks.Security
              darwin.apple_sdk.frameworks.SystemConfiguration
            ];
            
            # Environment variables
            OPENSSL_DIR = "${pkgs.openssl.dev}";
            OPENSSL_LIB_DIR = "${pkgs.openssl.out}/lib";
            OPENSSL_INCLUDE_DIR = "${pkgs.openssl.dev}/include";
            PKG_CONFIG_PATH = "${pkgs.openssl.dev}/lib/pkgconfig:${pkgs.sqlite.dev}/lib/pkgconfig";
            SQLITE3_LIB_DIR = "${pkgs.sqlite.out}/lib";
            SQLITE3_INCLUDE_DIR = "${pkgs.sqlite.dev}/include";
            
            # Rust target
            CARGO_BUILD_TARGET = "aarch64-apple-darwin";
          }
          EOF

      - name: Install Rust target in Nix environment
        run: |
          nix-shell --run "rustup target add ${{ env.PLATFORM_TARGET }}"

      - name: Verify Nix environment
        run: |
          nix-shell --run "
            echo '=== Nix Environment Setup ==='
            echo 'Rust version:' && rustc --version
            echo 'Cargo version:' && cargo --version
            echo 'OpenSSL version:' && openssl version
            echo 'pkg-config version:' && pkg-config --version
            echo 'autoconf version:' && autoconf --version
            echo 'automake version:' && automake --version
            echo 'libtool version:' && libtool --version
            echo 'make version:' && make --version
            echo
            echo '=== Environment Variables ==='
            echo 'OPENSSL_DIR:' \$OPENSSL_DIR
            echo 'OPENSSL_LIB_DIR:' \$OPENSSL_LIB_DIR
            echo 'OPENSSL_INCLUDE_DIR:' \$OPENSSL_INCLUDE_DIR
            echo 'PKG_CONFIG_PATH:' \$PKG_CONFIG_PATH
          "

      - name: Clone git dependencies
        run: |
          # Use a temporary directory instead of /Users/runner/code
          export BUILD_DIR=$HOME/tmp/eltord-build-$(date +%s)
          mkdir -p $BUILD_DIR
          echo "BUILD_DIR=$BUILD_DIR" >> $GITHUB_ENV
          
          git clone https://github.com/el-tor/eltor.git $BUILD_DIR/eltor
          git clone https://github.com/lightning-node-interface/lni.git $BUILD_DIR/lni
          git clone https://github.com/el-tor/libeltor-sys.git $BUILD_DIR/libeltor-sys
          git clone https://github.com/el-tor/libeltor.git $BUILD_DIR/libeltor
          git clone https://github.com/el-tor/eltord.git $BUILD_DIR/eltord

      - name: Checkout specific branches
        run: |
          cd $BUILD_DIR/eltord && git checkout lib
          cd $BUILD_DIR/lni && git checkout search

      - name: Build libeltor-sys in Nix environment
        run: |
          nix-shell --run "
            cd $BUILD_DIR/libeltor-sys
            ls -la && ls -la scripts
            chmod +x scripts/copy.sh scripts/build.sh
            ./scripts/copy.sh
            mkdir -p patches libtor-src/patches
            touch patches/.keep libtor-src/patches/.keep
            cargo build --release --verbose --target ${{ env.PLATFORM_TARGET }} --features vendored-openssl
          "

      - name: Build eltord in Nix environment
        run: |
          nix-shell --run "
            cd $BUILD_DIR/eltord
            cargo build --release --verbose --target ${{ env.PLATFORM_TARGET }} --features vendored-openssl
          "

      - name: Copy artifacts
        run: |
          # Create artifacts directory in workspace (persists locally with act)
          mkdir -p artifacts/${{ env.PLATFORM_OS_NAME }}
          cp $BUILD_DIR/eltord/target/${{ env.PLATFORM_TARGET }}/release/eltor artifacts/${{ env.PLATFORM_OS_NAME }}/${{ env.PLATFORM_BIN }}
          
          # For local act runs, also copy to a persistent cache directory
          if [ "$ACT" = "true" ]; then
            CACHE_DIR="$HOME/.cache/eltord-build-cache/artifacts"
            mkdir -p "$CACHE_DIR/${{ env.PLATFORM_OS_NAME }}"
            cp $BUILD_DIR/eltord/target/${{ env.PLATFORM_TARGET }}/release/eltor "$CACHE_DIR/${{ env.PLATFORM_OS_NAME }}/${{ env.PLATFORM_BIN }}"
            echo "Cached artifact to: $CACHE_DIR/${{ env.PLATFORM_OS_NAME }}/${{ env.PLATFORM_BIN }}"
          fi

      - name: Cleanup
        run: |
          # Clean up temporary build directory
          rm -rf $BUILD_DIR
          echo "Cleaned up temporary build directory: $BUILD_DIR"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        if: ${{ !env.ACT }}  # Skip artifact upload when running with act
        with:
          name: eltord-${{ env.PLATFORM_OS_NAME }}
          path: |
            artifacts
          if-no-files-found: error

      - name: Show local artifacts (act only)
        if: ${{ env.ACT }}  # Only run when using act locally
        run: |
          echo "=== Local Build Artifacts ==="
          echo "üìÅ Workspace artifacts:"
          ls -la artifacts/
          ls -la artifacts/${{ env.PLATFORM_OS_NAME }}/
          echo
          
          CACHE_DIR="$HOME/.cache/eltord-build-cache/artifacts"
          if [ -d "$CACHE_DIR" ]; then
            echo "üóÉÔ∏è  Cached artifacts (persistent between runs):"
            ls -la "$CACHE_DIR"
            if [ -d "$CACHE_DIR/${{ env.PLATFORM_OS_NAME }}" ]; then
              ls -la "$CACHE_DIR/${{ env.PLATFORM_OS_NAME }}/"
            fi
            echo
          fi
          
          echo "üéâ Build completed successfully!"
          echo "üì¶ Workspace artifact: $(pwd)/artifacts/${{ env.PLATFORM_OS_NAME }}/${{ env.PLATFORM_BIN }}"
          if [ -f "$CACHE_DIR/${{ env.PLATFORM_OS_NAME }}/${{ env.PLATFORM_BIN }}" ]; then
            echo "üóÉÔ∏è  Cached artifact: $CACHE_DIR/${{ env.PLATFORM_OS_NAME }}/${{ env.PLATFORM_BIN }}"
          fi
          echo "üìè Binary size: $(ls -lh artifacts/${{ env.PLATFORM_OS_NAME }}/${{ env.PLATFORM_BIN }} | awk '{print $5}')"
          echo "üèóÔ∏è  Architecture: ${{ env.PLATFORM_TARGET }}"

      - name: Release binary
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/${{ env.PLATFORM_OS_NAME }}/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}